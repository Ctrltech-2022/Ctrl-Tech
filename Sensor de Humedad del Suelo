#include <WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"

#include <Wire.h>
#define BLYNK_PRINT Serial
int sensorPin = 32;
float Lectura_Analogica = 0;
int hume = 0 ;
//int hume = analogRead(SensorPin);

//*********Conectar a wifi*******
//#define WLAN_SSID       "Hackaton"
//#define WLAN_PASS       "5ystem-H4ck"
#define WLAN_SSID       "Monitoreo2"
#define WLAN_PASS       "1234567890"

//***********************
/********* Adafruit.io Setup ***********/

#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME  "joelpk"
#define AIO_KEY       "aio_iUoP41Lyn8g0W6KGYmGaT8lgkCcO"
/**** Global State (you don't need to change this!) ******/

// Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;
// or... use WiFiClientSecure for SSL
//WiFiClientSecure client;

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);
 // Setup a feed called 'photocell' for publishing.
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname>
Adafruit_MQTT_Publish humedad = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/hum");

// Setup a feed called 'onoff' for subscribing to changes.
void MQTT_connect();
 void setup() {
   Serial.begin(115200);
   Serial.println(F("Adafruit MQTT demo"));
  pinMode(4, OUTPUT);
  digitalWrite(4, HIGH);


  // Connect to WiFi access point.
  Serial.println(); Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);

  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();

  Serial.println("WiFi connected");
  Serial.println("IP address: "); Serial.println(WiFi.localIP());

 }
 void loop() {  


  char buffer[10];//Variable para crear una cadena
  Lectura_Analogica = analogRead(sensorPin);//Leer el valor del potenciometro 
  hume = map(Lectura_Analogica, 0, 4095, 100, 0);//Escala para utilizarlo con el servo 
  //sprintf(buffer,"%03d",hume);//crear una cadena para mostrar siempre 3 digitos
   Serial.print(hume);
   
   if(hume < 500)
   {
      Serial.println("Encendido");  
      //hacer las acciones necesarias
   }
   delay(1000);
  //int hume = analogRead(SensorPin);
  MQTT_connect();
  Serial.print(F("\n enviando valor humedad "));
  Serial.print(hume);
  Serial.print("...");
  if (! humedad.publish(hume)) {
    Serial.println(F("fallo"));
  } else {
    Serial.println(F("OK!"));
  }
  
   
  
 }
 void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  Serial.print("Connecting to MQTT... ");

  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
       retries--;
       if (retries == 0) {
         // basically die and wait for WDT to reset me
         while (1);
       }
  }
  Serial.println("MQTT Connected!");
}
